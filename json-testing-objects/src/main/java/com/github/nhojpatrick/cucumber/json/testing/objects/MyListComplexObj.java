package com.github.nhojpatrick.cucumber.json.testing.objects;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaBean;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.gen.BeanDefinition;
import org.joda.beans.gen.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import java.util.Map;

@BeanDefinition
@JsonPropertyOrder({
        "lcName",
        "lcId",
        "lcBottom"
})
@SuppressFBWarnings(value = "CN_IDIOM_NO_SUPER_CALL", justification = "Managed by JodaBeans")
@SuppressWarnings("PMD.UselessParentheses")
public class MyListComplexObj
        implements Bean,
        Cloneable {

    @JsonProperty
    @PropertyDefinition(set = "")
    private final String lcName;

    @JsonProperty
    @PropertyDefinition(set = "")
    private final int lcId;

    @JsonProperty
    @PropertyDefinition(set = "")
    private final MyListComplexBottomObj lcBottom;

    MyListComplexObj() {
        this.lcName = null;
        this.lcId = 0;
        this.lcBottom = null;
    }

    public MyListComplexObj(final String lcName,
                            final int lcId,
                            final MyListComplexBottomObj lcBottom) {
        this.lcName = lcName;
        this.lcId = lcId;
        this.lcBottom = lcBottom;
    }

    //------------------------- AUTOGENERATED START -------------------------
    /**
     * The meta-bean for {@code MyListComplexObj}.
     * @return the meta-bean, not null
     */
    public static MyListComplexObj.Meta meta() {
        return MyListComplexObj.Meta.INSTANCE;
    }

    static {
        MetaBean.register(MyListComplexObj.Meta.INSTANCE);
    }

    @Override
    public MyListComplexObj.Meta metaBean() {
        return MyListComplexObj.Meta.INSTANCE;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the lcName.
     * @return the value of the property
     */
    public String getLcName() {
        return lcName;
    }

    /**
     * Gets the the {@code lcName} property.
     * @return the property, not null
     */
    public final Property<String> lcName() {
        return metaBean().lcName().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the lcId.
     * @return the value of the property
     */
    public int getLcId() {
        return lcId;
    }

    /**
     * Gets the the {@code lcId} property.
     * @return the property, not null
     */
    public final Property<Integer> lcId() {
        return metaBean().lcId().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the lcBottom.
     * @return the value of the property
     */
    public MyListComplexBottomObj getLcBottom() {
        return lcBottom;
    }

    /**
     * Gets the the {@code lcBottom} property.
     * @return the property, not null
     */
    public final Property<MyListComplexBottomObj> lcBottom() {
        return metaBean().lcBottom().createProperty(this);
    }

    //-----------------------------------------------------------------------
    @Override
    public MyListComplexObj clone() {
        return JodaBeanUtils.cloneAlways(this);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            MyListComplexObj other = (MyListComplexObj) obj;
            return JodaBeanUtils.equal(getLcName(), other.getLcName()) &&
                    (getLcId() == other.getLcId()) &&
                    JodaBeanUtils.equal(getLcBottom(), other.getLcBottom());
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = getClass().hashCode();
        hash = hash * 31 + JodaBeanUtils.hashCode(getLcName());
        hash = hash * 31 + JodaBeanUtils.hashCode(getLcId());
        hash = hash * 31 + JodaBeanUtils.hashCode(getLcBottom());
        return hash;
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(128);
        buf.append("MyListComplexObj{");
        int len = buf.length();
        toString(buf);
        if (buf.length() > len) {
            buf.setLength(buf.length() - 2);
        }
        buf.append('}');
        return buf.toString();
    }

    protected void toString(StringBuilder buf) {
        buf.append("lcName").append('=').append(JodaBeanUtils.toString(getLcName())).append(',').append(' ');
        buf.append("lcId").append('=').append(JodaBeanUtils.toString(getLcId())).append(',').append(' ');
        buf.append("lcBottom").append('=').append(JodaBeanUtils.toString(getLcBottom())).append(',').append(' ');
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code MyListComplexObj}.
     */
    public static class Meta extends DirectMetaBean {
        /**
         * The singleton instance of the meta-bean.
         */
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code lcName} property.
         */
        private final MetaProperty<String> lcName = DirectMetaProperty.ofReadOnly(
                this, "lcName", MyListComplexObj.class, String.class);
        /**
         * The meta-property for the {@code lcId} property.
         */
        private final MetaProperty<Integer> lcId = DirectMetaProperty.ofReadOnly(
                this, "lcId", MyListComplexObj.class, Integer.TYPE);
        /**
         * The meta-property for the {@code lcBottom} property.
         */
        private final MetaProperty<MyListComplexBottomObj> lcBottom = DirectMetaProperty.ofReadOnly(
                this, "lcBottom", MyListComplexObj.class, MyListComplexBottomObj.class);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, null,
                "lcName",
                "lcId",
                "lcBottom");

        /**
         * Restricted constructor.
         */
        protected Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case -1109170014:  // lcName
                    return lcName;
                case 3314930:  // lcId
                    return lcId;
                case -1090888062:  // lcBottom
                    return lcBottom;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public BeanBuilder<? extends MyListComplexObj> builder() {
            return new DirectBeanBuilder<>(new MyListComplexObj());
        }

        @Override
        public Class<? extends MyListComplexObj> beanType() {
            return MyListComplexObj.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code lcName} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> lcName() {
            return lcName;
        }

        /**
         * The meta-property for the {@code lcId} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Integer> lcId() {
            return lcId;
        }

        /**
         * The meta-property for the {@code lcBottom} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<MyListComplexBottomObj> lcBottom() {
            return lcBottom;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case -1109170014:  // lcName
                    return ((MyListComplexObj) bean).getLcName();
                case 3314930:  // lcId
                    return ((MyListComplexObj) bean).getLcId();
                case -1090888062:  // lcBottom
                    return ((MyListComplexObj) bean).getLcBottom();
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            switch (propertyName.hashCode()) {
                case -1109170014:  // lcName
                    if (quiet) {
                        return;
                    }
                    throw new UnsupportedOperationException("Property cannot be written: lcName");
                case 3314930:  // lcId
                    if (quiet) {
                        return;
                    }
                    throw new UnsupportedOperationException("Property cannot be written: lcId");
                case -1090888062:  // lcBottom
                    if (quiet) {
                        return;
                    }
                    throw new UnsupportedOperationException("Property cannot be written: lcBottom");
            }
            super.propertySet(bean, propertyName, newValue, quiet);
        }

    }

    //-------------------------- AUTOGENERATED END --------------------------

}
