package com.github.nhojpatrick.cucumber.testing.internal.objects;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaBean;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.gen.BeanDefinition;
import org.joda.beans.gen.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import java.util.List;
import java.util.Map;

@BeanDefinition
@JsonPropertyOrder({
        "name",
        "labels",
        "bottom",
        "nests"
})
@SuppressFBWarnings(value = "CN_IDIOM_NO_SUPER_CALL", justification = "Managed by JodaBeans")
@SuppressWarnings("PMD.UselessParentheses")
public class MyNestedObj
        implements Bean,
        Cloneable {

    @JsonProperty
    @PropertyDefinition(set = "")
    private final String name;

    @JsonProperty
    @PropertyDefinition(set = "")
    private List<String> labels;

    @JsonProperty
    @PropertyDefinition(set = "")
    private final MyBottomObj bottom;

    @JsonProperty
    @PropertyDefinition(set = "")
    private final List<MyListNestedObj> nests;

    MyNestedObj() {
        this.name = null;
        this.labels = null;
        this.bottom = null;
        this.nests = null;
    }

    public MyNestedObj(final String name,
                       final List<String> labels,
                       final MyBottomObj bottom,
                       final List<MyListNestedObj> nests) {
        this.name = name;
        this.labels = labels;
        this.bottom = bottom;
        this.nests = nests;
    }

    //------------------------- AUTOGENERATED START -------------------------
    /**
     * The meta-bean for {@code MyNestedObj}.
     * @return the meta-bean, not null
     */
    public static MyNestedObj.Meta meta() {
        return MyNestedObj.Meta.INSTANCE;
    }

    static {
        MetaBean.register(MyNestedObj.Meta.INSTANCE);
    }

    @Override
    public MyNestedObj.Meta metaBean() {
        return MyNestedObj.Meta.INSTANCE;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the name.
     * @return the value of the property
     */
    public String getName() {
        return name;
    }

    /**
     * Gets the the {@code name} property.
     * @return the property, not null
     */
    public final Property<String> name() {
        return metaBean().name().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the labels.
     * @return the value of the property
     */
    public List<String> getLabels() {
        return labels;
    }

    /**
     * Gets the the {@code labels} property.
     * @return the property, not null
     */
    public final Property<List<String>> labels() {
        return metaBean().labels().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the bottom.
     * @return the value of the property
     */
    public MyBottomObj getBottom() {
        return bottom;
    }

    /**
     * Gets the the {@code bottom} property.
     * @return the property, not null
     */
    public final Property<MyBottomObj> bottom() {
        return metaBean().bottom().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the nests.
     * @return the value of the property
     */
    public List<MyListNestedObj> getNests() {
        return nests;
    }

    /**
     * Gets the the {@code nests} property.
     * @return the property, not null
     */
    public final Property<List<MyListNestedObj>> nests() {
        return metaBean().nests().createProperty(this);
    }

    //-----------------------------------------------------------------------
    @Override
    public MyNestedObj clone() {
        return JodaBeanUtils.cloneAlways(this);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            MyNestedObj other = (MyNestedObj) obj;
            return JodaBeanUtils.equal(getName(), other.getName()) &&
                    JodaBeanUtils.equal(getLabels(), other.getLabels()) &&
                    JodaBeanUtils.equal(getBottom(), other.getBottom()) &&
                    JodaBeanUtils.equal(getNests(), other.getNests());
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = getClass().hashCode();
        hash = hash * 31 + JodaBeanUtils.hashCode(getName());
        hash = hash * 31 + JodaBeanUtils.hashCode(getLabels());
        hash = hash * 31 + JodaBeanUtils.hashCode(getBottom());
        hash = hash * 31 + JodaBeanUtils.hashCode(getNests());
        return hash;
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(160);
        buf.append("MyNestedObj{");
        int len = buf.length();
        toString(buf);
        if (buf.length() > len) {
            buf.setLength(buf.length() - 2);
        }
        buf.append('}');
        return buf.toString();
    }

    protected void toString(StringBuilder buf) {
        buf.append("name").append('=').append(JodaBeanUtils.toString(getName())).append(',').append(' ');
        buf.append("labels").append('=').append(JodaBeanUtils.toString(getLabels())).append(',').append(' ');
        buf.append("bottom").append('=').append(JodaBeanUtils.toString(getBottom())).append(',').append(' ');
        buf.append("nests").append('=').append(JodaBeanUtils.toString(getNests())).append(',').append(' ');
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code MyNestedObj}.
     */
    public static class Meta extends DirectMetaBean {
        /**
         * The singleton instance of the meta-bean.
         */
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code name} property.
         */
        private final MetaProperty<String> name = DirectMetaProperty.ofReadOnly(
                this, "name", MyNestedObj.class, String.class);
        /**
         * The meta-property for the {@code labels} property.
         */
        @SuppressWarnings({"unchecked", "rawtypes" })
        private final MetaProperty<List<String>> labels = DirectMetaProperty.ofReadOnly(
                this, "labels", MyNestedObj.class, (Class) List.class);
        /**
         * The meta-property for the {@code bottom} property.
         */
        private final MetaProperty<MyBottomObj> bottom = DirectMetaProperty.ofReadOnly(
                this, "bottom", MyNestedObj.class, MyBottomObj.class);
        /**
         * The meta-property for the {@code nests} property.
         */
        @SuppressWarnings({"unchecked", "rawtypes" })
        private final MetaProperty<List<MyListNestedObj>> nests = DirectMetaProperty.ofReadOnly(
                this, "nests", MyNestedObj.class, (Class) List.class);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, null,
                "name",
                "labels",
                "bottom",
                "nests");

        /**
         * Restricted constructor.
         */
        protected Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case 3373707:  // name
                    return name;
                case -1110417409:  // labels
                    return labels;
                case -1383228885:  // bottom
                    return bottom;
                case 104710427:  // nests
                    return nests;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public BeanBuilder<? extends MyNestedObj> builder() {
            return new DirectBeanBuilder<>(new MyNestedObj());
        }

        @Override
        public Class<? extends MyNestedObj> beanType() {
            return MyNestedObj.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code name} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> name() {
            return name;
        }

        /**
         * The meta-property for the {@code labels} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<List<String>> labels() {
            return labels;
        }

        /**
         * The meta-property for the {@code bottom} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<MyBottomObj> bottom() {
            return bottom;
        }

        /**
         * The meta-property for the {@code nests} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<List<MyListNestedObj>> nests() {
            return nests;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 3373707:  // name
                    return ((MyNestedObj) bean).getName();
                case -1110417409:  // labels
                    return ((MyNestedObj) bean).getLabels();
                case -1383228885:  // bottom
                    return ((MyNestedObj) bean).getBottom();
                case 104710427:  // nests
                    return ((MyNestedObj) bean).getNests();
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 3373707:  // name
                    if (quiet) {
                        return;
                    }
                    throw new UnsupportedOperationException("Property cannot be written: name");
                case -1110417409:  // labels
                    if (quiet) {
                        return;
                    }
                    throw new UnsupportedOperationException("Property cannot be written: labels");
                case -1383228885:  // bottom
                    if (quiet) {
                        return;
                    }
                    throw new UnsupportedOperationException("Property cannot be written: bottom");
                case 104710427:  // nests
                    if (quiet) {
                        return;
                    }
                    throw new UnsupportedOperationException("Property cannot be written: nests");
            }
            super.propertySet(bean, propertyName, newValue, quiet);
        }

    }

    //-------------------------- AUTOGENERATED END --------------------------

}
