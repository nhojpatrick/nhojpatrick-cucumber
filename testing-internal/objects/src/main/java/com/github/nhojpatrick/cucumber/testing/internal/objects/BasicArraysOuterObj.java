package com.github.nhojpatrick.cucumber.testing.internal.objects;

import com.fasterxml.jackson.annotation.JsonProperty;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaBean;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.gen.BeanDefinition;
import org.joda.beans.gen.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import java.util.List;
import java.util.Map;

@BeanDefinition
@JsonCustomDefaults
@SuppressFBWarnings(value = "CN_IDIOM_NO_SUPER_CALL", justification = "Managed by JodaBeans")
@SuppressWarnings("PMD.UselessParentheses")
public class BasicArraysOuterObj
        implements Bean,
        Cloneable {

    public static final String NULL_ARRAY = "null_array";
    public static final String OBJECTS_ARRAY = "objects_array";
    public static final String PRIMITIVE = "primitive";
    public static final String PRIMITIVES_ARRAY = "primitives_array";

    @JsonProperty(NULL_ARRAY)
    @PropertyDefinition(set = "")
    private final Object nullArray;

    @JsonProperty(OBJECTS_ARRAY)
    @PropertyDefinition(set = "")
    private final List<BasicArraysInnerObj> objectsArray;

    @JsonProperty(PRIMITIVE)
    @PropertyDefinition(set = "")
    private final String primitive;

    @JsonProperty(PRIMITIVES_ARRAY)
    @PropertyDefinition(set = "")
    private final List<String> primitivesArray;

    BasicArraysOuterObj() {
        this.nullArray = null;
        this.objectsArray = null;
        this.primitive = null;
        this.primitivesArray = null;
    }

    public BasicArraysOuterObj(final List<BasicArraysInnerObj> objectsArray,
                               final String primitive,
                               final List<String> primitivesArray) {
        this.nullArray = null;
        this.objectsArray = objectsArray;
        this.primitive = primitive;
        this.primitivesArray = primitivesArray;
    }

    //------------------------- AUTOGENERATED START -------------------------
    /**
     * The meta-bean for {@code BasicArraysOuterObj}.
     * @return the meta-bean, not null
     */
    public static BasicArraysOuterObj.Meta meta() {
        return BasicArraysOuterObj.Meta.INSTANCE;
    }

    static {
        MetaBean.register(BasicArraysOuterObj.Meta.INSTANCE);
    }

    @Override
    public BasicArraysOuterObj.Meta metaBean() {
        return BasicArraysOuterObj.Meta.INSTANCE;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the nullArray.
     * @return the value of the property
     */
    public Object getNullArray() {
        return nullArray;
    }

    /**
     * Gets the the {@code nullArray} property.
     * @return the property, not null
     */
    public final Property<Object> nullArray() {
        return metaBean().nullArray().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the objectsArray.
     * @return the value of the property
     */
    public List<BasicArraysInnerObj> getObjectsArray() {
        return objectsArray;
    }

    /**
     * Gets the the {@code objectsArray} property.
     * @return the property, not null
     */
    public final Property<List<BasicArraysInnerObj>> objectsArray() {
        return metaBean().objectsArray().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the primitive.
     * @return the value of the property
     */
    public String getPrimitive() {
        return primitive;
    }

    /**
     * Gets the the {@code primitive} property.
     * @return the property, not null
     */
    public final Property<String> primitive() {
        return metaBean().primitive().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the primitivesArray.
     * @return the value of the property
     */
    public List<String> getPrimitivesArray() {
        return primitivesArray;
    }

    /**
     * Gets the the {@code primitivesArray} property.
     * @return the property, not null
     */
    public final Property<List<String>> primitivesArray() {
        return metaBean().primitivesArray().createProperty(this);
    }

    //-----------------------------------------------------------------------
    @Override
    public BasicArraysOuterObj clone() {
        return JodaBeanUtils.cloneAlways(this);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            BasicArraysOuterObj other = (BasicArraysOuterObj) obj;
            return JodaBeanUtils.equal(getNullArray(), other.getNullArray()) &&
                    JodaBeanUtils.equal(getObjectsArray(), other.getObjectsArray()) &&
                    JodaBeanUtils.equal(getPrimitive(), other.getPrimitive()) &&
                    JodaBeanUtils.equal(getPrimitivesArray(), other.getPrimitivesArray());
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = getClass().hashCode();
        hash = hash * 31 + JodaBeanUtils.hashCode(getNullArray());
        hash = hash * 31 + JodaBeanUtils.hashCode(getObjectsArray());
        hash = hash * 31 + JodaBeanUtils.hashCode(getPrimitive());
        hash = hash * 31 + JodaBeanUtils.hashCode(getPrimitivesArray());
        return hash;
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(160);
        buf.append("BasicArraysOuterObj{");
        int len = buf.length();
        toString(buf);
        if (buf.length() > len) {
            buf.setLength(buf.length() - 2);
        }
        buf.append('}');
        return buf.toString();
    }

    protected void toString(StringBuilder buf) {
        buf.append("nullArray").append('=').append(JodaBeanUtils.toString(getNullArray()))
                .append(',').append(' ');
        buf.append("objectsArray").append('=').append(JodaBeanUtils.toString(getObjectsArray()))
                .append(',').append(' ');
        buf.append("primitive").append('=').append(JodaBeanUtils.toString(getPrimitive()))
                .append(',').append(' ');
        buf.append("primitivesArray").append('=').append(JodaBeanUtils.toString(getPrimitivesArray()))
                .append(',').append(' ');
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code BasicArraysOuterObj}.
     */
    public static class Meta extends DirectMetaBean {
        /**
         * The singleton instance of the meta-bean.
         */
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code nullArray} property.
         */
        private final MetaProperty<Object> nullArray = DirectMetaProperty.ofReadOnly(
                this, "nullArray", BasicArraysOuterObj.class, Object.class);
        /**
         * The meta-property for the {@code objectsArray} property.
         */
        @SuppressWarnings({"unchecked", "rawtypes" })
        private final MetaProperty<List<BasicArraysInnerObj>> objectsArray = DirectMetaProperty.ofReadOnly(
                this, "objectsArray", BasicArraysOuterObj.class, (Class) List.class);
        /**
         * The meta-property for the {@code primitive} property.
         */
        private final MetaProperty<String> primitive = DirectMetaProperty.ofReadOnly(
                this, "primitive", BasicArraysOuterObj.class, String.class);
        /**
         * The meta-property for the {@code primitivesArray} property.
         */
        @SuppressWarnings({"unchecked", "rawtypes" })
        private final MetaProperty<List<String>> primitivesArray = DirectMetaProperty.ofReadOnly(
                this, "primitivesArray", BasicArraysOuterObj.class, (Class) List.class);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, null,
                "nullArray",
                "objectsArray",
                "primitive",
                "primitivesArray");

        /**
         * Restricted constructor.
         */
        protected Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case 1015486738:  // nullArray
                    return nullArray;
                case -412497499:  // objectsArray
                    return objectsArray;
                case -1834808089:  // primitive
                    return primitive;
                case 451958093:  // primitivesArray
                    return primitivesArray;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public BeanBuilder<? extends BasicArraysOuterObj> builder() {
            return new DirectBeanBuilder<>(new BasicArraysOuterObj());
        }

        @Override
        public Class<? extends BasicArraysOuterObj> beanType() {
            return BasicArraysOuterObj.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code nullArray} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Object> nullArray() {
            return nullArray;
        }

        /**
         * The meta-property for the {@code objectsArray} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<List<BasicArraysInnerObj>> objectsArray() {
            return objectsArray;
        }

        /**
         * The meta-property for the {@code primitive} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> primitive() {
            return primitive;
        }

        /**
         * The meta-property for the {@code primitivesArray} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<List<String>> primitivesArray() {
            return primitivesArray;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 1015486738:  // nullArray
                    return ((BasicArraysOuterObj) bean).getNullArray();
                case -412497499:  // objectsArray
                    return ((BasicArraysOuterObj) bean).getObjectsArray();
                case -1834808089:  // primitive
                    return ((BasicArraysOuterObj) bean).getPrimitive();
                case 451958093:  // primitivesArray
                    return ((BasicArraysOuterObj) bean).getPrimitivesArray();
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 1015486738:  // nullArray
                    if (quiet) {
                        return;
                    }
                    throw new UnsupportedOperationException("Property cannot be written: nullArray");
                case -412497499:  // objectsArray
                    if (quiet) {
                        return;
                    }
                    throw new UnsupportedOperationException("Property cannot be written: objectsArray");
                case -1834808089:  // primitive
                    if (quiet) {
                        return;
                    }
                    throw new UnsupportedOperationException("Property cannot be written: primitive");
                case 451958093:  // primitivesArray
                    if (quiet) {
                        return;
                    }
                    throw new UnsupportedOperationException("Property cannot be written: primitivesArray");
            }
            super.propertySet(bean, propertyName, newValue, quiet);
        }

    }

    //-------------------------- AUTOGENERATED END --------------------------

}
