package com.github.nhojpatrick.cucumber.testing.internal.objects;

import com.fasterxml.jackson.annotation.JsonProperty;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaBean;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.gen.BeanDefinition;
import org.joda.beans.gen.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

@BeanDefinition
@JsonCustomDefaults
@SuppressFBWarnings(value = "CN_IDIOM_NO_SUPER_CALL", justification = "Managed by JodaBeans")
@SuppressWarnings("PMD.UselessParentheses")
public class BasicArraysOuterObj
        implements Bean,
        Cloneable {

    public static final String OBJECTS_ARRAY = "objects_array";
    public static final String OBJECTS_EMPTY = "objects_empty";
    public static final String OBJECTS_NULL = "objects_null";
    public static final String PRIMITIVES_ARRAY = "primitives_array";
    public static final String PRIMITIVES_EMPTY = "primitives_empty";
    public static final String PRIMITIVES_NULL = "primitives_null";

    @JsonProperty(OBJECTS_ARRAY)
    @PropertyDefinition(set = "")
    private final List<BasicArraysInnerObj> objects;

    @JsonProperty(OBJECTS_EMPTY)
    @PropertyDefinition(set = "")
    private final List<BasicArraysInnerObj> objectsEmpty;

    @JsonProperty(OBJECTS_NULL)
    @PropertyDefinition(set = "")
    private final List<BasicArraysInnerObj> objectsNull;

    @JsonProperty(PRIMITIVES_ARRAY)
    @PropertyDefinition(set = "")
    private final List<String> primitives;

    @JsonProperty(PRIMITIVES_EMPTY)
    @PropertyDefinition(set = "")
    private final List<String> primitivesEmpty;

    @JsonProperty(PRIMITIVES_NULL)
    @PropertyDefinition(set = "")
    private final List<String> primitivesNull;

    BasicArraysOuterObj() {
        this.objects = null;
        this.objectsEmpty = null;
        this.objectsNull = null;
        this.primitives = null;
        this.primitivesEmpty = null;
        this.primitivesNull = null;
    }

    public BasicArraysOuterObj(final List<BasicArraysInnerObj> objectsArray,
                               final List<String> primitivesArray) {
        this.objects = objectsArray;
        this.objectsEmpty = new ArrayList<>();
        this.objectsNull = null;
        this.primitives = primitivesArray;
        this.primitivesEmpty = new ArrayList<>();
        this.primitivesNull = null;
    }

    //------------------------- AUTOGENERATED START -------------------------
    /**
     * The meta-bean for {@code BasicArraysOuterObj}.
     * @return the meta-bean, not null
     */
    public static BasicArraysOuterObj.Meta meta() {
        return BasicArraysOuterObj.Meta.INSTANCE;
    }

    static {
        MetaBean.register(BasicArraysOuterObj.Meta.INSTANCE);
    }

    @Override
    public BasicArraysOuterObj.Meta metaBean() {
        return BasicArraysOuterObj.Meta.INSTANCE;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the objects.
     * @return the value of the property
     */
    public List<BasicArraysInnerObj> getObjects() {
        return objects;
    }

    /**
     * Gets the the {@code objects} property.
     * @return the property, not null
     */
    public final Property<List<BasicArraysInnerObj>> objects() {
        return metaBean().objects().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the objectsEmpty.
     * @return the value of the property
     */
    public List<BasicArraysInnerObj> getObjectsEmpty() {
        return objectsEmpty;
    }

    /**
     * Gets the the {@code objectsEmpty} property.
     * @return the property, not null
     */
    public final Property<List<BasicArraysInnerObj>> objectsEmpty() {
        return metaBean().objectsEmpty().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the objectsNull.
     * @return the value of the property
     */
    public List<BasicArraysInnerObj> getObjectsNull() {
        return objectsNull;
    }

    /**
     * Gets the the {@code objectsNull} property.
     * @return the property, not null
     */
    public final Property<List<BasicArraysInnerObj>> objectsNull() {
        return metaBean().objectsNull().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the primitives.
     * @return the value of the property
     */
    public List<String> getPrimitives() {
        return primitives;
    }

    /**
     * Gets the the {@code primitives} property.
     * @return the property, not null
     */
    public final Property<List<String>> primitives() {
        return metaBean().primitives().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the primitivesEmpty.
     * @return the value of the property
     */
    public List<String> getPrimitivesEmpty() {
        return primitivesEmpty;
    }

    /**
     * Gets the the {@code primitivesEmpty} property.
     * @return the property, not null
     */
    public final Property<List<String>> primitivesEmpty() {
        return metaBean().primitivesEmpty().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the primitivesNull.
     * @return the value of the property
     */
    public List<String> getPrimitivesNull() {
        return primitivesNull;
    }

    /**
     * Gets the the {@code primitivesNull} property.
     * @return the property, not null
     */
    public final Property<List<String>> primitivesNull() {
        return metaBean().primitivesNull().createProperty(this);
    }

    //-----------------------------------------------------------------------
    @Override
    public BasicArraysOuterObj clone() {
        return JodaBeanUtils.cloneAlways(this);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            BasicArraysOuterObj other = (BasicArraysOuterObj) obj;
            return JodaBeanUtils.equal(getObjects(), other.getObjects()) &&
                    JodaBeanUtils.equal(getObjectsEmpty(), other.getObjectsEmpty()) &&
                    JodaBeanUtils.equal(getObjectsNull(), other.getObjectsNull()) &&
                    JodaBeanUtils.equal(getPrimitives(), other.getPrimitives()) &&
                    JodaBeanUtils.equal(getPrimitivesEmpty(), other.getPrimitivesEmpty()) &&
                    JodaBeanUtils.equal(getPrimitivesNull(), other.getPrimitivesNull());
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = getClass().hashCode();
        hash = hash * 31 + JodaBeanUtils.hashCode(getObjects());
        hash = hash * 31 + JodaBeanUtils.hashCode(getObjectsEmpty());
        hash = hash * 31 + JodaBeanUtils.hashCode(getObjectsNull());
        hash = hash * 31 + JodaBeanUtils.hashCode(getPrimitives());
        hash = hash * 31 + JodaBeanUtils.hashCode(getPrimitivesEmpty());
        hash = hash * 31 + JodaBeanUtils.hashCode(getPrimitivesNull());
        return hash;
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(224);
        buf.append("BasicArraysOuterObj{");
        int len = buf.length();
        toString(buf);
        if (buf.length() > len) {
            buf.setLength(buf.length() - 2);
        }
        buf.append('}');
        return buf.toString();
    }

    protected void toString(StringBuilder buf) {
        buf.append("objects").append('=').append(JodaBeanUtils.toString(getObjects()))
                .append(',').append(' ');
        buf.append("objectsEmpty").append('=').append(JodaBeanUtils.toString(getObjectsEmpty()))
                .append(',').append(' ');
        buf.append("objectsNull").append('=').append(JodaBeanUtils.toString(getObjectsNull()))
                .append(',').append(' ');
        buf.append("primitives").append('=').append(JodaBeanUtils.toString(getPrimitives()))
                .append(',').append(' ');
        buf.append("primitivesEmpty").append('=').append(JodaBeanUtils.toString(getPrimitivesEmpty()))
                .append(',').append(' ');
        buf.append("primitivesNull").append('=').append(JodaBeanUtils.toString(getPrimitivesNull()))
                .append(',').append(' ');
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code BasicArraysOuterObj}.
     */
    public static class Meta extends DirectMetaBean {
        /**
         * The singleton instance of the meta-bean.
         */
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code objects} property.
         */
        @SuppressWarnings({"unchecked", "rawtypes" })
        private final MetaProperty<List<BasicArraysInnerObj>> objects = DirectMetaProperty.ofReadOnly(
                this, "objects", BasicArraysOuterObj.class, (Class) List.class);
        /**
         * The meta-property for the {@code objectsEmpty} property.
         */
        @SuppressWarnings({"unchecked", "rawtypes" })
        private final MetaProperty<List<BasicArraysInnerObj>> objectsEmpty = DirectMetaProperty.ofReadOnly(
                this, "objectsEmpty", BasicArraysOuterObj.class, (Class) List.class);
        /**
         * The meta-property for the {@code objectsNull} property.
         */
        @SuppressWarnings({"unchecked", "rawtypes" })
        private final MetaProperty<List<BasicArraysInnerObj>> objectsNull = DirectMetaProperty.ofReadOnly(
                this, "objectsNull", BasicArraysOuterObj.class, (Class) List.class);
        /**
         * The meta-property for the {@code primitives} property.
         */
        @SuppressWarnings({"unchecked", "rawtypes" })
        private final MetaProperty<List<String>> primitives = DirectMetaProperty.ofReadOnly(
                this, "primitives", BasicArraysOuterObj.class, (Class) List.class);
        /**
         * The meta-property for the {@code primitivesEmpty} property.
         */
        @SuppressWarnings({"unchecked", "rawtypes" })
        private final MetaProperty<List<String>> primitivesEmpty = DirectMetaProperty.ofReadOnly(
                this, "primitivesEmpty", BasicArraysOuterObj.class, (Class) List.class);
        /**
         * The meta-property for the {@code primitivesNull} property.
         */
        @SuppressWarnings({"unchecked", "rawtypes" })
        private final MetaProperty<List<String>> primitivesNull = DirectMetaProperty.ofReadOnly(
                this, "primitivesNull", BasicArraysOuterObj.class, (Class) List.class);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, null,
                "objects",
                "objectsEmpty",
                "objectsNull",
                "primitives",
                "primitivesEmpty",
                "primitivesNull");

        /**
         * Restricted constructor.
         */
        protected Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case -1659648748:  // objects
                    return objects;
                case -408953703:  // objectsEmpty
                    return objectsEmpty;
                case -1259842373:  // objectsNull
                    return objectsNull;
                case -1044475796:  // primitives
                    return primitives;
                case 455501889:  // primitivesEmpty
                    return primitivesEmpty;
                case -1509051373:  // primitivesNull
                    return primitivesNull;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public BeanBuilder<? extends BasicArraysOuterObj> builder() {
            return new DirectBeanBuilder<>(new BasicArraysOuterObj());
        }

        @Override
        public Class<? extends BasicArraysOuterObj> beanType() {
            return BasicArraysOuterObj.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code objects} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<List<BasicArraysInnerObj>> objects() {
            return objects;
        }

        /**
         * The meta-property for the {@code objectsEmpty} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<List<BasicArraysInnerObj>> objectsEmpty() {
            return objectsEmpty;
        }

        /**
         * The meta-property for the {@code objectsNull} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<List<BasicArraysInnerObj>> objectsNull() {
            return objectsNull;
        }

        /**
         * The meta-property for the {@code primitives} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<List<String>> primitives() {
            return primitives;
        }

        /**
         * The meta-property for the {@code primitivesEmpty} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<List<String>> primitivesEmpty() {
            return primitivesEmpty;
        }

        /**
         * The meta-property for the {@code primitivesNull} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<List<String>> primitivesNull() {
            return primitivesNull;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case -1659648748:  // objects
                    return ((BasicArraysOuterObj) bean).getObjects();
                case -408953703:  // objectsEmpty
                    return ((BasicArraysOuterObj) bean).getObjectsEmpty();
                case -1259842373:  // objectsNull
                    return ((BasicArraysOuterObj) bean).getObjectsNull();
                case -1044475796:  // primitives
                    return ((BasicArraysOuterObj) bean).getPrimitives();
                case 455501889:  // primitivesEmpty
                    return ((BasicArraysOuterObj) bean).getPrimitivesEmpty();
                case -1509051373:  // primitivesNull
                    return ((BasicArraysOuterObj) bean).getPrimitivesNull();
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            switch (propertyName.hashCode()) {
                case -1659648748:  // objects
                    if (quiet) {
                        return;
                    }
                    throw new UnsupportedOperationException("Property cannot be written: objects");
                case -408953703:  // objectsEmpty
                    if (quiet) {
                        return;
                    }
                    throw new UnsupportedOperationException("Property cannot be written: objectsEmpty");
                case -1259842373:  // objectsNull
                    if (quiet) {
                        return;
                    }
                    throw new UnsupportedOperationException("Property cannot be written: objectsNull");
                case -1044475796:  // primitives
                    if (quiet) {
                        return;
                    }
                    throw new UnsupportedOperationException("Property cannot be written: primitives");
                case 455501889:  // primitivesEmpty
                    if (quiet) {
                        return;
                    }
                    throw new UnsupportedOperationException("Property cannot be written: primitivesEmpty");
                case -1509051373:  // primitivesNull
                    if (quiet) {
                        return;
                    }
                    throw new UnsupportedOperationException("Property cannot be written: primitivesNull");
            }
            super.propertySet(bean, propertyName, newValue, quiet);
        }

    }

    //-------------------------- AUTOGENERATED END --------------------------

}
