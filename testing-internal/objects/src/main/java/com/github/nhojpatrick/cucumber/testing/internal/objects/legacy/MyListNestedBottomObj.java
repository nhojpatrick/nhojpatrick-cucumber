package com.github.nhojpatrick.cucumber.testing.internal.objects.legacy;

import com.fasterxml.jackson.annotation.JsonProperty;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaBean;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.gen.BeanDefinition;
import org.joda.beans.gen.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import java.util.Map;

@BeanDefinition
@SuppressFBWarnings(value = "CN_IDIOM_NO_SUPER_CALL", justification = "Managed by JodaBeans")
@SuppressWarnings("PMD.UselessParentheses")
public class MyListNestedBottomObj
        implements Bean,
        Cloneable {

    @JsonProperty
    @PropertyDefinition(set = "")
    private final String charlie;

    MyListNestedBottomObj() {
        this.charlie = null;
    }

    public MyListNestedBottomObj(final String charlie) {
        this.charlie = charlie;
    }

    //------------------------- AUTOGENERATED START -------------------------
    /**
     * The meta-bean for {@code MyListNestedBottomObj}.
     * @return the meta-bean, not null
     */
    public static MyListNestedBottomObj.Meta meta() {
        return MyListNestedBottomObj.Meta.INSTANCE;
    }

    static {
        MetaBean.register(MyListNestedBottomObj.Meta.INSTANCE);
    }

    @Override
    public MyListNestedBottomObj.Meta metaBean() {
        return MyListNestedBottomObj.Meta.INSTANCE;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the charlie.
     * @return the value of the property
     */
    public String getCharlie() {
        return charlie;
    }

    /**
     * Gets the the {@code charlie} property.
     * @return the property, not null
     */
    public final Property<String> charlie() {
        return metaBean().charlie().createProperty(this);
    }

    //-----------------------------------------------------------------------
    @Override
    public MyListNestedBottomObj clone() {
        return JodaBeanUtils.cloneAlways(this);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            MyListNestedBottomObj other = (MyListNestedBottomObj) obj;
            return JodaBeanUtils.equal(getCharlie(), other.getCharlie());
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = getClass().hashCode();
        hash = hash * 31 + JodaBeanUtils.hashCode(getCharlie());
        return hash;
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(64);
        buf.append("MyListNestedBottomObj{");
        int len = buf.length();
        toString(buf);
        if (buf.length() > len) {
            buf.setLength(buf.length() - 2);
        }
        buf.append('}');
        return buf.toString();
    }

    protected void toString(StringBuilder buf) {
        buf.append("charlie").append('=').append(JodaBeanUtils.toString(getCharlie())).append(',').append(' ');
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code MyListNestedBottomObj}.
     */
    public static class Meta extends DirectMetaBean {
        /**
         * The singleton instance of the meta-bean.
         */
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code charlie} property.
         */
        private final MetaProperty<String> charlie = DirectMetaProperty.ofReadOnly(
                this, "charlie", MyListNestedBottomObj.class, String.class);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, null,
                "charlie");

        /**
         * Restricted constructor.
         */
        protected Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case 739067762:  // charlie
                    return charlie;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public BeanBuilder<? extends MyListNestedBottomObj> builder() {
            return new DirectBeanBuilder<>(new MyListNestedBottomObj());
        }

        @Override
        public Class<? extends MyListNestedBottomObj> beanType() {
            return MyListNestedBottomObj.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code charlie} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> charlie() {
            return charlie;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 739067762:  // charlie
                    return ((MyListNestedBottomObj) bean).getCharlie();
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 739067762:  // charlie
                    if (quiet) {
                        return;
                    }
                    throw new UnsupportedOperationException("Property cannot be written: charlie");
            }
            super.propertySet(bean, propertyName, newValue, quiet);
        }

    }

    //-------------------------- AUTOGENERATED END --------------------------

}
