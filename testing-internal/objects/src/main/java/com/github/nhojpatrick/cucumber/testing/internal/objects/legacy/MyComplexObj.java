package com.github.nhojpatrick.cucumber.testing.internal.objects.legacy;

import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaBean;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.gen.BeanDefinition;
import org.joda.beans.gen.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import java.util.List;
import java.util.Map;

@BeanDefinition
@JsonAutoDetect(
        creatorVisibility = JsonAutoDetect.Visibility.NONE,
//        fieldVisibility = JsonAutoDetect.Visibility.DEFAULT,
        getterVisibility = JsonAutoDetect.Visibility.NONE,
        isGetterVisibility = JsonAutoDetect.Visibility.NONE,
        setterVisibility = JsonAutoDetect.Visibility.NONE
)
@JsonPropertyOrder({
        MyComplexObj.ACTIVE,
        MyComplexObj.COUNT,
        MyComplexObj.NESTED,
        MyComplexObj.OBJS,
        MyComplexObj.TAGS,
        MyComplexObj.TITLE
})
@SuppressFBWarnings(value = "CN_IDIOM_NO_SUPER_CALL", justification = "Managed by JodaBeans")
@SuppressWarnings("PMD.UselessParentheses")
public class MyComplexObj
        implements Bean,
        Cloneable {

    public static final String ACTIVE = "active";
    public static final String COUNT = "count";
    public static final String NESTED = "nested";
    public static final String OBJS = "objs";
    public static final String TAGS = "tags";
    public static final String TITLE = "title";

    @JsonProperty(TITLE)
    @PropertyDefinition(set = "")
    private final String title;

    @JsonProperty(ACTIVE)
    @PropertyDefinition(set = "")
    private final boolean active;

    @JsonProperty(COUNT)
    @PropertyDefinition(set = "")
    private final int count;

    @JsonProperty(TAGS)
    @PropertyDefinition(set = "")
    private List<String> tags;

    @JsonProperty(NESTED)
    @PropertyDefinition(set = "")
    private final MyNestedObj nested;

    @JsonProperty(OBJS)
    @PropertyDefinition(set = "")
    private final List<MyListComplexObj> objs;

    MyComplexObj() {
        this.title = null;
        this.active = false;
        this.count = 0;
        this.tags = null;
        this.nested = null;
        this.objs = null;
    }

    public MyComplexObj(final String title,
                        final boolean active,
                        final int count,
                        final List<String> tags,
                        final MyNestedObj nested,
                        final List<MyListComplexObj> objs) {
        this.title = title;
        this.active = active;
        this.count = count;
        this.tags = tags;
        this.nested = nested;
        this.objs = objs;
    }

    //------------------------- AUTOGENERATED START -------------------------
    /**
     * The meta-bean for {@code MyComplexObj}.
     * @return the meta-bean, not null
     */
    public static MyComplexObj.Meta meta() {
        return MyComplexObj.Meta.INSTANCE;
    }

    static {
        MetaBean.register(MyComplexObj.Meta.INSTANCE);
    }

    @Override
    public MyComplexObj.Meta metaBean() {
        return MyComplexObj.Meta.INSTANCE;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the title.
     * @return the value of the property
     */
    public String getTitle() {
        return title;
    }

    /**
     * Gets the the {@code title} property.
     * @return the property, not null
     */
    public final Property<String> title() {
        return metaBean().title().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the active.
     * @return the value of the property
     */
    public boolean isActive() {
        return active;
    }

    /**
     * Gets the the {@code active} property.
     * @return the property, not null
     */
    public final Property<Boolean> active() {
        return metaBean().active().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the count.
     * @return the value of the property
     */
    public int getCount() {
        return count;
    }

    /**
     * Gets the the {@code count} property.
     * @return the property, not null
     */
    public final Property<Integer> count() {
        return metaBean().count().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the tags.
     * @return the value of the property
     */
    public List<String> getTags() {
        return tags;
    }

    /**
     * Gets the the {@code tags} property.
     * @return the property, not null
     */
    public final Property<List<String>> tags() {
        return metaBean().tags().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the nested.
     * @return the value of the property
     */
    public MyNestedObj getNested() {
        return nested;
    }

    /**
     * Gets the the {@code nested} property.
     * @return the property, not null
     */
    public final Property<MyNestedObj> nested() {
        return metaBean().nested().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the objs.
     * @return the value of the property
     */
    public List<MyListComplexObj> getObjs() {
        return objs;
    }

    /**
     * Gets the the {@code objs} property.
     * @return the property, not null
     */
    public final Property<List<MyListComplexObj>> objs() {
        return metaBean().objs().createProperty(this);
    }

    //-----------------------------------------------------------------------
    @Override
    public MyComplexObj clone() {
        return JodaBeanUtils.cloneAlways(this);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            MyComplexObj other = (MyComplexObj) obj;
            return JodaBeanUtils.equal(getTitle(), other.getTitle()) &&
                    (isActive() == other.isActive()) &&
                    (getCount() == other.getCount()) &&
                    JodaBeanUtils.equal(getTags(), other.getTags()) &&
                    JodaBeanUtils.equal(getNested(), other.getNested()) &&
                    JodaBeanUtils.equal(getObjs(), other.getObjs());
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = getClass().hashCode();
        hash = hash * 31 + JodaBeanUtils.hashCode(getTitle());
        hash = hash * 31 + JodaBeanUtils.hashCode(isActive());
        hash = hash * 31 + JodaBeanUtils.hashCode(getCount());
        hash = hash * 31 + JodaBeanUtils.hashCode(getTags());
        hash = hash * 31 + JodaBeanUtils.hashCode(getNested());
        hash = hash * 31 + JodaBeanUtils.hashCode(getObjs());
        return hash;
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(224);
        buf.append("MyComplexObj{");
        int len = buf.length();
        toString(buf);
        if (buf.length() > len) {
            buf.setLength(buf.length() - 2);
        }
        buf.append('}');
        return buf.toString();
    }

    protected void toString(StringBuilder buf) {
        buf.append("title").append('=').append(JodaBeanUtils.toString(getTitle())).append(',').append(' ');
        buf.append("active").append('=').append(JodaBeanUtils.toString(isActive())).append(',').append(' ');
        buf.append("count").append('=').append(JodaBeanUtils.toString(getCount())).append(',').append(' ');
        buf.append("tags").append('=').append(JodaBeanUtils.toString(getTags())).append(',').append(' ');
        buf.append("nested").append('=').append(JodaBeanUtils.toString(getNested())).append(',').append(' ');
        buf.append("objs").append('=').append(JodaBeanUtils.toString(getObjs())).append(',').append(' ');
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code MyComplexObj}.
     */
    public static class Meta extends DirectMetaBean {
        /**
         * The singleton instance of the meta-bean.
         */
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code title} property.
         */
        private final MetaProperty<String> title = DirectMetaProperty.ofReadOnly(
                this, "title", MyComplexObj.class, String.class);
        /**
         * The meta-property for the {@code active} property.
         */
        private final MetaProperty<Boolean> active = DirectMetaProperty.ofReadOnly(
                this, "active", MyComplexObj.class, Boolean.TYPE);
        /**
         * The meta-property for the {@code count} property.
         */
        private final MetaProperty<Integer> count = DirectMetaProperty.ofReadOnly(
                this, "count", MyComplexObj.class, Integer.TYPE);
        /**
         * The meta-property for the {@code tags} property.
         */
        @SuppressWarnings({"unchecked", "rawtypes" })
        private final MetaProperty<List<String>> tags = DirectMetaProperty.ofReadOnly(
                this, "tags", MyComplexObj.class, (Class) List.class);
        /**
         * The meta-property for the {@code nested} property.
         */
        private final MetaProperty<MyNestedObj> nested = DirectMetaProperty.ofReadOnly(
                this, "nested", MyComplexObj.class, MyNestedObj.class);
        /**
         * The meta-property for the {@code objs} property.
         */
        @SuppressWarnings({"unchecked", "rawtypes" })
        private final MetaProperty<List<MyListComplexObj>> objs = DirectMetaProperty.ofReadOnly(
                this, "objs", MyComplexObj.class, (Class) List.class);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, null,
                "title",
                "active",
                "count",
                "tags",
                "nested",
                "objs");

        /**
         * Restricted constructor.
         */
        protected Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case 110371416:  // title
                    return title;
                case -1422950650:  // active
                    return active;
                case 94851343:  // count
                    return count;
                case 3552281:  // tags
                    return tags;
                case -1048944393:  // nested
                    return nested;
                case 3404380:  // objs
                    return objs;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public BeanBuilder<? extends MyComplexObj> builder() {
            return new DirectBeanBuilder<>(new MyComplexObj());
        }

        @Override
        public Class<? extends MyComplexObj> beanType() {
            return MyComplexObj.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code title} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> title() {
            return title;
        }

        /**
         * The meta-property for the {@code active} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Boolean> active() {
            return active;
        }

        /**
         * The meta-property for the {@code count} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Integer> count() {
            return count;
        }

        /**
         * The meta-property for the {@code tags} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<List<String>> tags() {
            return tags;
        }

        /**
         * The meta-property for the {@code nested} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<MyNestedObj> nested() {
            return nested;
        }

        /**
         * The meta-property for the {@code objs} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<List<MyListComplexObj>> objs() {
            return objs;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 110371416:  // title
                    return ((MyComplexObj) bean).getTitle();
                case -1422950650:  // active
                    return ((MyComplexObj) bean).isActive();
                case 94851343:  // count
                    return ((MyComplexObj) bean).getCount();
                case 3552281:  // tags
                    return ((MyComplexObj) bean).getTags();
                case -1048944393:  // nested
                    return ((MyComplexObj) bean).getNested();
                case 3404380:  // objs
                    return ((MyComplexObj) bean).getObjs();
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 110371416:  // title
                    if (quiet) {
                        return;
                    }
                    throw new UnsupportedOperationException("Property cannot be written: title");
                case -1422950650:  // active
                    if (quiet) {
                        return;
                    }
                    throw new UnsupportedOperationException("Property cannot be written: active");
                case 94851343:  // count
                    if (quiet) {
                        return;
                    }
                    throw new UnsupportedOperationException("Property cannot be written: count");
                case 3552281:  // tags
                    if (quiet) {
                        return;
                    }
                    throw new UnsupportedOperationException("Property cannot be written: tags");
                case -1048944393:  // nested
                    if (quiet) {
                        return;
                    }
                    throw new UnsupportedOperationException("Property cannot be written: nested");
                case 3404380:  // objs
                    if (quiet) {
                        return;
                    }
                    throw new UnsupportedOperationException("Property cannot be written: objs");
            }
            super.propertySet(bean, propertyName, newValue, quiet);
        }

    }

    //-------------------------- AUTOGENERATED END --------------------------

}
