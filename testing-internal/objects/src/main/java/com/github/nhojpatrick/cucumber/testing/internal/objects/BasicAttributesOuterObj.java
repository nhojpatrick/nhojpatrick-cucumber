package com.github.nhojpatrick.cucumber.testing.internal.objects;

import com.fasterxml.jackson.annotation.JsonProperty;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaBean;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.gen.BeanDefinition;
import org.joda.beans.gen.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import java.util.Map;

@BeanDefinition
@JsonCustomDefaults
@SuppressFBWarnings(value = {"CN_IDIOM_NO_SUPER_CALL",
        "EI_EXPOSE_REP",
        "USBR_UNNECESSARY_STORE_BEFORE_RETURN"},
        justification = "Managed by JodaBeans")
@SuppressWarnings("PMD.UselessParentheses")
public class BasicAttributesOuterObj
        implements Bean,
        Cloneable {

    public static final String A_BOOLEAN = "a_boolean";
    public static final String A_FLOAT = "a_float";
    public static final String A_INTEGER = "a_integer";
    public static final String A_NULL = "a_null";
    public static final String A_OBJECT_EMPTY = "a_object_empty";
    public static final String A_STRING = "a_string";

    @JsonProperty(A_BOOLEAN)
    @PropertyDefinition(set = "")
    private final Boolean aBoolean;

    @JsonProperty(A_FLOAT)
    @PropertyDefinition(set = "")
    private final Float aFloat;

    @JsonProperty(A_INTEGER)
    @PropertyDefinition(set = "")
    private final Integer aInteger;

    @JsonProperty(A_NULL)
    @PropertyDefinition(set = "")
    private final Object aNull;

    @JsonProperty(A_OBJECT_EMPTY)
    @PropertyDefinition(set = "")
    private final BasicAttributesInnerObj aObjectEmpty;

    @JsonProperty(A_STRING)
    @PropertyDefinition(set = "")
    private final String aString;

    BasicAttributesOuterObj() {
        this.aBoolean = null;
        this.aFloat = null;
        this.aInteger = null;
        this.aNull = null;
        this.aObjectEmpty = null;
        this.aString = null;
    }

    public BasicAttributesOuterObj(final Boolean aBoolean,
                                   final Float aFloat,
                                   final Integer aInteger,
                                   final String aString) {
        this.aBoolean = aBoolean;
        this.aFloat = aFloat;
        this.aInteger = aInteger;
        this.aNull = null;
        this.aObjectEmpty = new BasicAttributesInnerObj();
        this.aString = aString;
    }

    //------------------------- AUTOGENERATED START -------------------------
    /**
     * The meta-bean for {@code BasicAttributesOuterObj}.
     * @return the meta-bean, not null
     */
    public static BasicAttributesOuterObj.Meta meta() {
        return BasicAttributesOuterObj.Meta.INSTANCE;
    }

    static {
        MetaBean.register(BasicAttributesOuterObj.Meta.INSTANCE);
    }

    @Override
    public BasicAttributesOuterObj.Meta metaBean() {
        return BasicAttributesOuterObj.Meta.INSTANCE;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the aBoolean.
     * @return the value of the property
     */
    public Boolean getABoolean() {
        return aBoolean;
    }

    /**
     * Gets the the {@code aBoolean} property.
     * @return the property, not null
     */
    public final Property<Boolean> aBoolean() {
        return metaBean().aBoolean().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the aFloat.
     * @return the value of the property
     */
    public Float getAFloat() {
        return aFloat;
    }

    /**
     * Gets the the {@code aFloat} property.
     * @return the property, not null
     */
    public final Property<Float> aFloat() {
        return metaBean().aFloat().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the aInteger.
     * @return the value of the property
     */
    public Integer getAInteger() {
        return aInteger;
    }

    /**
     * Gets the the {@code aInteger} property.
     * @return the property, not null
     */
    public final Property<Integer> aInteger() {
        return metaBean().aInteger().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the aNull.
     * @return the value of the property
     */
    public Object getANull() {
        return aNull;
    }

    /**
     * Gets the the {@code aNull} property.
     * @return the property, not null
     */
    public final Property<Object> aNull() {
        return metaBean().aNull().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the aObjectEmpty.
     * @return the value of the property
     */
    public BasicAttributesInnerObj getAObjectEmpty() {
        return aObjectEmpty;
    }

    /**
     * Gets the the {@code aObjectEmpty} property.
     * @return the property, not null
     */
    public final Property<BasicAttributesInnerObj> aObjectEmpty() {
        return metaBean().aObjectEmpty().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the aString.
     * @return the value of the property
     */
    public String getAString() {
        return aString;
    }

    /**
     * Gets the the {@code aString} property.
     * @return the property, not null
     */
    public final Property<String> aString() {
        return metaBean().aString().createProperty(this);
    }

    //-----------------------------------------------------------------------
    @Override
    public BasicAttributesOuterObj clone() {
        return JodaBeanUtils.cloneAlways(this);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            BasicAttributesOuterObj other = (BasicAttributesOuterObj) obj;
            return JodaBeanUtils.equal(getABoolean(), other.getABoolean()) &&
                    JodaBeanUtils.equal(getAFloat(), other.getAFloat()) &&
                    JodaBeanUtils.equal(getAInteger(), other.getAInteger()) &&
                    JodaBeanUtils.equal(getANull(), other.getANull()) &&
                    JodaBeanUtils.equal(getAObjectEmpty(), other.getAObjectEmpty()) &&
                    JodaBeanUtils.equal(getAString(), other.getAString());
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = getClass().hashCode();
        hash = hash * 31 + JodaBeanUtils.hashCode(getABoolean());
        hash = hash * 31 + JodaBeanUtils.hashCode(getAFloat());
        hash = hash * 31 + JodaBeanUtils.hashCode(getAInteger());
        hash = hash * 31 + JodaBeanUtils.hashCode(getANull());
        hash = hash * 31 + JodaBeanUtils.hashCode(getAObjectEmpty());
        hash = hash * 31 + JodaBeanUtils.hashCode(getAString());
        return hash;
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(224);
        buf.append("BasicAttributesOuterObj{");
        int len = buf.length();
        toString(buf);
        if (buf.length() > len) {
            buf.setLength(buf.length() - 2);
        }
        buf.append('}');
        return buf.toString();
    }

    protected void toString(StringBuilder buf) {
        buf.append("aBoolean").append('=').append(JodaBeanUtils.toString(getABoolean())).append(',').append(' ');
        buf.append("aFloat").append('=').append(JodaBeanUtils.toString(getAFloat())).append(',').append(' ');
        buf.append("aInteger").append('=').append(JodaBeanUtils.toString(getAInteger())).append(',').append(' ');
        buf.append("aNull").append('=').append(JodaBeanUtils.toString(getANull())).append(',').append(' ');
        buf.append("aObjectEmpty").append('=').append(JodaBeanUtils.toString(getAObjectEmpty())).append(',').append(' ');
        buf.append("aString").append('=').append(JodaBeanUtils.toString(getAString())).append(',').append(' ');
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code BasicAttributesOuterObj}.
     */
    public static class Meta extends DirectMetaBean {
        /**
         * The singleton instance of the meta-bean.
         */
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code aBoolean} property.
         */
        private final MetaProperty<Boolean> aBoolean = DirectMetaProperty.ofReadOnly(
                this, "aBoolean", BasicAttributesOuterObj.class, Boolean.class);
        /**
         * The meta-property for the {@code aFloat} property.
         */
        private final MetaProperty<Float> aFloat = DirectMetaProperty.ofReadOnly(
                this, "aFloat", BasicAttributesOuterObj.class, Float.class);
        /**
         * The meta-property for the {@code aInteger} property.
         */
        private final MetaProperty<Integer> aInteger = DirectMetaProperty.ofReadOnly(
                this, "aInteger", BasicAttributesOuterObj.class, Integer.class);
        /**
         * The meta-property for the {@code aNull} property.
         */
        private final MetaProperty<Object> aNull = DirectMetaProperty.ofReadOnly(
                this, "aNull", BasicAttributesOuterObj.class, Object.class);
        /**
         * The meta-property for the {@code aObjectEmpty} property.
         */
        private final MetaProperty<BasicAttributesInnerObj> aObjectEmpty = DirectMetaProperty.ofReadOnly(
                this, "aObjectEmpty", BasicAttributesOuterObj.class, BasicAttributesInnerObj.class);
        /**
         * The meta-property for the {@code aString} property.
         */
        private final MetaProperty<String> aString = DirectMetaProperty.ofReadOnly(
                this, "aString", BasicAttributesOuterObj.class, String.class);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, null,
                "aBoolean",
                "aFloat",
                "aInteger",
                "aNull",
                "aObjectEmpty",
                "aString");

        /**
         * Restricted constructor.
         */
        protected Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case -1016724345:  // aBoolean
                    return aBoolean;
                case -1449965957:  // aFloat
                    return aFloat;
                case 876616093:  // aInteger
                    return aInteger;
                case 92021128:  // aNull
                    return aNull;
                case 2585133:  // aObjectEmpty
                    return aObjectEmpty;
                case -1619607598:  // aString
                    return aString;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public BeanBuilder<? extends BasicAttributesOuterObj> builder() {
            return new DirectBeanBuilder<>(new BasicAttributesOuterObj());
        }

        @Override
        public Class<? extends BasicAttributesOuterObj> beanType() {
            return BasicAttributesOuterObj.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code aBoolean} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Boolean> aBoolean() {
            return aBoolean;
        }

        /**
         * The meta-property for the {@code aFloat} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Float> aFloat() {
            return aFloat;
        }

        /**
         * The meta-property for the {@code aInteger} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Integer> aInteger() {
            return aInteger;
        }

        /**
         * The meta-property for the {@code aNull} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Object> aNull() {
            return aNull;
        }

        /**
         * The meta-property for the {@code aObjectEmpty} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<BasicAttributesInnerObj> aObjectEmpty() {
            return aObjectEmpty;
        }

        /**
         * The meta-property for the {@code aString} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> aString() {
            return aString;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case -1016724345:  // aBoolean
                    return ((BasicAttributesOuterObj) bean).getABoolean();
                case -1449965957:  // aFloat
                    return ((BasicAttributesOuterObj) bean).getAFloat();
                case 876616093:  // aInteger
                    return ((BasicAttributesOuterObj) bean).getAInteger();
                case 92021128:  // aNull
                    return ((BasicAttributesOuterObj) bean).getANull();
                case 2585133:  // aObjectEmpty
                    return ((BasicAttributesOuterObj) bean).getAObjectEmpty();
                case -1619607598:  // aString
                    return ((BasicAttributesOuterObj) bean).getAString();
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            switch (propertyName.hashCode()) {
                case -1016724345:  // aBoolean
                    if (quiet) {
                        return;
                    }
                    throw new UnsupportedOperationException("Property cannot be written: aBoolean");
                case -1449965957:  // aFloat
                    if (quiet) {
                        return;
                    }
                    throw new UnsupportedOperationException("Property cannot be written: aFloat");
                case 876616093:  // aInteger
                    if (quiet) {
                        return;
                    }
                    throw new UnsupportedOperationException("Property cannot be written: aInteger");
                case 92021128:  // aNull
                    if (quiet) {
                        return;
                    }
                    throw new UnsupportedOperationException("Property cannot be written: aNull");
                case 2585133:  // aObjectEmpty
                    if (quiet) {
                        return;
                    }
                    throw new UnsupportedOperationException("Property cannot be written: aObjectEmpty");
                case -1619607598:  // aString
                    if (quiet) {
                        return;
                    }
                    throw new UnsupportedOperationException("Property cannot be written: aString");
            }
            super.propertySet(bean, propertyName, newValue, quiet);
        }

    }

    //-------------------------- AUTOGENERATED END --------------------------

}
